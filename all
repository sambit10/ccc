*&---------------------------------------------------------------------*
*& Report  /SDF/CMO_TOC                                           *
*&                                                                     *
*&---------------------------------------------------------------------*
*This program is used by Twin Trasnport Alignment team.
*&                                                                     *
*&---------------------------------------------------------------------*
REPORT  zcreate_twin_transport.
INCLUDE zcreate_twin_transport_top.

INITIALIZATION.

AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'PB_SHOW'.
      PERFORM display_toc.
    WHEN 'PB_CREATE'.
      PERFORM validate_transport.
      PERFORM create_toc USING p_ori_tr p_target
                      CHANGING p_toc p_twin.
      EXIT.
    WHEN 'FC01'.
      CALL FUNCTION 'HELP_OBJECT_SHOW_FOR_FIELD'
        EXPORTING
          doklangu         = sy-langu
          called_for_tab   = '/SDF/XML_STRUC'
          called_for_field = 'XML_DATA'
        EXCEPTIONS
          object_not_found = 1
          sapscript_error  = 2
          OTHERS           = 3.

  ENDCASE.
*&---------------------------------------------------------------------*
*&      Form  create_toc
*&---------------------------------------------------------------------*
END-OF-SELECTION.

  PERFORM create_toc USING p_ori_tr p_target
                  CHANGING p_toc p_twin.

*&---------------------------------------------------------------------*
*&      Form  create_toc
*&---------------------------------------------------------------------*
FORM create_toc USING p_ori_tr p_target
             CHANGING p_toc p_twin.

  SELECT SINGLE value1
    INTO        gv_destination
    FROM        zxdynamic_func
    WHERE       id  = 'TWINTRANSP'
    AND criteria1   = 'DESTINATIO'  .

  CALL FUNCTION 'RFC_GET_SYSTEM_INFO'
    EXPORTING
      destination             = gv_destination
    EXCEPTIONS
      authority_not_available = 1
      OTHERS                  = 2.

  IF sy-subrc <> 0.
    MESSAGE text-020 TYPE 'A' .
  ENDIF.


** Added by Tushar on 04-Jun-19 - for more than one transport
*  CLEAR lv_target.
*  CLEAR lv_ori_tr.

  CLEAR : lv_target, lv_ori_tr, lv_no_export, lv_ign_attrib.

** Added by Tushar on 04-Jun-19 - for more than one transport



  lv_target = p_target.
  lv_ori_tr = p_ori_tr.

  SELECT SINGLE param_value FROM /sdf/cmo_tr_conf
    INTO lv_no_export
   WHERE config_param = 'NO_EXPORT'.   "#EC*

  SELECT SINGLE param_value FROM /sdf/cmo_tr_conf
    INTO lv_ign_attrib
   WHERE config_param = 'IGN_ATTRIB'.  "#EC*

* Authority Check

  IF lv_no_export = 'X'.
    AUTHORITY-CHECK OBJECT 'S_TRANSPRT'
             ID 'TTYPE' FIELD 'TRAN'
             ID 'ACTVT' FIELD '01'.
  ELSE.
    AUTHORITY-CHECK OBJECT 'S_TRANSPRT'
             ID 'TTYPE' FIELD 'TRAN'
             ID 'ACTVT' FIELD '43'.
  ENDIF.

  IF sy-subrc NE 0.
    MESSAGE i333(s1) WITH 'No authorization to for'
                          'transport of copies'.            "#EC NOTEXT
    EXIT.
  ENDIF.

* Check existence of FM 'TMW_CREATE_TRANSPORT_OF_COPIES'
  CALL FUNCTION '/SDF/GEN_FUNCS_FUNC_INFO_GET'
    EXPORTING
      funcname               = 'TMW_CREATE_TRANSPORT_OF_COPIES'
    EXCEPTIONS
      function_not_available = 1
      OTHERS                 = 2.

  IF sy-subrc NE 0.
    MESSAGE i333(s1) WITH
     'Module TMW_CREATE_TRANSPORT_OF_COPIES'
     'does not exist. sy-subrc =' sy-subrc.                 "#EC NOTEXT
    EXIT.
  ENDIF.

* Check transport target

  SELECT SINGLE param_value FROM /sdf/cmo_tr_conf
    INTO lv_f4_targets
   WHERE config_param = 'F4_TARGETS'.     "#EC*

  IF lv_f4_targets = 'X'.

    SELECT SINGLE tr_target
        FROM /sdf/cmo_target
        INTO lv_tr_target
        WHERE tr_target = lv_target.    "#EC*

    IF sy-subrc NE 0.
      MESSAGE e120(tk) WITH lv_target.
      EXIT.
    ENDIF.

  ENDIF.

  CALL FUNCTION 'TR_CHECK_TRANSPORT_TARGET'
    EXPORTING
      iv_target                    = lv_target
    EXCEPTIONS
      e_syntax_error               = 1
      e_invalid_target_system      = 2
      e_invalid_target_client      = 3
      e_invalid_target_group       = 4
      e_cts_initialization_failure = 5
      OTHERS                       = 6.
  IF sy-subrc <> 0.
    MESSAGE e120(tk) WITH lv_target.
    EXIT.
  ENDIF.

  REFRESH lt_targeth.
  REFRESH lt_target.
  CLEAR ls_target.

  IF lv_target(1) = '/'.

    CALL FUNCTION 'TR_READ_TARGET_GROUP'
      EXPORTING
        iv_targ_group           = lv_target
      IMPORTING
        et_targets              = lt_target
      EXCEPTIONS
        targ_group_doesnt_exist = 1
        OTHERS                  = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    LOOP AT lt_target INTO ls_target.
      IF ls_target-client = space.
        ls_target-client = sy-mandt.
      ENDIF.
      MOVE-CORRESPONDING ls_target TO lt_targeth.
      APPEND lt_targeth.
    ENDLOOP.

  ELSE.
    ls_target-sysname = lv_target(3).
    ls_target-client = lv_target+4(3).
    IF ls_target-client = space.
      ls_target-client = sy-mandt.
    ENDIF.
    MOVE-CORRESPONDING ls_target TO lt_targeth.
    APPEND lt_targeth.
  ENDIF.

  lv_ign_attrib = 'X'.

* Create Transport of Copies

  CALL FUNCTION 'TMW_CREATE_TRANSPORT_OF_COPIES'
    EXPORTING
      iv_transport_target           = lv_target
      iv_trkorr                     = lv_ori_tr
      iv_no_export                  = lv_no_export
      iv_ignore_request_type        = 'X'
      iv_ignore_original_attributes = lv_ign_attrib
    IMPORTING
      es_pre_transport              = ls_toc
    EXCEPTIONS
      order_check_error             = 1
      enqueue_failed                = 2
      error_parameters              = 3
      reuse_request_failure         = 4
      create_order_failure          = 5
      export_request_failed         = 6
      configuration_error           = 7
      general_failure               = 8
      OTHERS                        = 9.             "#EC EXISTS

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ELSE.
      p_toc = ls_toc-trkorr.
  ENDIF.

* Write the orginal TR and the test TR into log table
  SELECT *
    FROM /sdf/cmo_toc_log
    INTO TABLE lt_toc_log
    WHERE orig_transport = lv_ori_tr
      AND active = 'X'.                 "#EC*

  IF sy-subrc = 0.
    READ TABLE lt_toc_log INDEX 1.
    lt_toc_log-active = ''.
    MODIFY lt_toc_log TRANSPORTING active
      WHERE orig_transport = lv_ori_tr.
  ENDIF.

  lt_toc_log-orig_transport = lv_ori_tr.
  lt_toc_log-test_transport = ls_toc-trkorr.
  lt_toc_log-create_date = sy-datum.
  lt_toc_log-create_time = sy-uzeit.
  lt_toc_log-active = 'X'.
  APPEND lt_toc_log.
  MODIFY /sdf/cmo_toc_log FROM TABLE lt_toc_log.

  SELECT SINGLE param_value FROM /sdf/cmo_tr_conf
    INTO lv_autoimport
   WHERE config_param = 'AUTOIMPORT'.      "#EC*

  IF lv_no_export NE 'X'.

* Wait 30 x 10 seconds for export to be finished
    DO 30 TIMES.
      CLEAR: lv_trstatus.

      SELECT SINGLE trstatus
        FROM e070
        INTO lv_trstatus
        WHERE trkorr = ls_toc-trkorr.

** Added by Tushar Choksi - Start
      SELECT  SINGLE as4text
        INTO  lv_as4text
        FROM  ztr_detail_info
        WHERE trkorr = p_ori_tr.

      SELECT SINGLE *
        INTO        @DATA(lv_zxdyamic_func)
        FROM        zxdynamic_func
        WHERE       id        EQ 'TWINTRANSP'
        AND         criteria1 EQ 'RELEASE'.

      CONCATENATE   lv_zxdyamic_func-description 'BAU:' p_ori_tr lv_as4text
      INTO          lv_as4text
      SEPARATED BY  space.

      UPDATE e070
      SET    as4user  = sy-uname
      WHERE  trkorr =  ls_toc-trkorr .

      UPDATE e07t
      SET    langu   = sy-langu
             as4text = lv_as4text
      WHERE  trkorr  =  ls_toc-trkorr       .


** Added by Tushar Choksi - End
      IF sy-subrc = 0 AND lv_trstatus = 'R'.

        WAIT UP TO 15 SECONDS.

        IF lv_autoimport = 'X'.
*       Perform import into target system
          REFRESH lt_requests.
          lt_requests-request = ls_toc-trkorr.
          APPEND lt_requests.

          LOOP AT lt_targeth INTO ls_target.

            CALL FUNCTION 'ZZTMS_MGR_IMPORT_TR_REQUEST'
*              DESTINATION gv_destination
              DESTINATION 'QE1CLNT100' " Jayesh testing TwinTR tool
              EXPORTING
                iv_request     = ls_toc-trkorr
                iv_system      = ls_target-sysname(3)
                iv_client      = ls_target-client
              IMPORTING
                ev_tp_ret_code = gv_ev_tp_ret_code
                ev_tp_alog     = gv_ev_tp_alog
                ev_tp_slog     = gv_ev_tp_slog
                ev_tp_pid      = gv_ev_tp_pid
                ev_tpstat_key  = gv_ev_tpstat_key
                es_exception   = gv_es_exception.

            IF sy-subrc <> 0.
              CASE sy-subrc.
                WHEN '1'.
                  MESSAGE 'Error Type 1' TYPE 'E'  .
                WHEN '2'.
                  MESSAGE 'Error Type 2' TYPE 'E'   .
                WHEN '3'.
                  MESSAGE 'Error Type Other' TYPE 'E' .
              ENDCASE.
            ENDIF.


            IF lv_retcode NE 0 AND lv_retcode NE 4.
              MESSAGE i333(s1) WITH lv_message
                                   'lv_retcode =' lv_retcode. "#EC NOTEXT
              EXIT.
            ENDIF.

*** // To create Twin Transport from TOC Trasnports Added by Tushar Choksi - Start

            WAIT UP TO 5 SECONDS.

            ls_trattributes-trkorr        = ls_toc-trkorr.
            ls_trattributes-pos           = '00001'.
            ls_trattributes-attribute     = 'Z_EVO_REMEDY_TICKET_NUMBER'.
            CONCATENATE 'CRQ0000' lv_zxdyamic_func-value2 INTO ls_trattributes-reference.
            APPEND ls_trattributes TO lt_trattributes.

            ls_trattributes-trkorr        = ls_toc-trkorr.
            ls_trattributes-pos           = '00002'.
            ls_trattributes-attribute     = 'Z_EVO_RELEASE'.
            ls_trattributes-reference     = lv_zxdyamic_func-value1  .
            APPEND ls_trattributes TO lt_trattributes.

            ls_trattributes-trkorr        = ls_toc-trkorr.
            ls_trattributes-pos           = '00003'.
            ls_trattributes-attribute     = 'Z_EVO_CATEGORY'.
            ls_trattributes-reference     = 'ALIGNMENT'.
            APPEND ls_trattributes TO lt_trattributes.

          CLEAR lv_as4text.
          SELECT  SINGLE as4text
            INTO  lv_as4text
            FROM  ztr_detail_info
            WHERE trkorr = p_ori_tr.

          CONCATENATE   lv_zxdyamic_func-description 'TOC:' ls_toc-trkorr lv_as4text
          INTO          lv_as4text
          SEPARATED BY  space.

**** Temp added by Shirin - to avoid TR release in remote system 14/02/2018 - Start
        lv_no_export = 'X' .
**** Temp added by Shirin - to avoid TR release in remote system 14/02/2018 - End

            CALL FUNCTION 'TMW_CREATE_TRANSPORT_OF_COPIES'
              DESTINATION gv_destination
              EXPORTING
                iv_trkorr                     = ls_toc-trkorr
                iv_no_export                  = lv_no_export
                iv_ignore_request_type        = 'X'
                iv_ignore_original_attributes = 'X'
                it_attributes                 = lt_trattributes
              IMPORTING
                es_pre_transport              = ls_toc
              EXCEPTIONS
                order_check_error             = 1
                enqueue_failed                = 2
                error_parameters              = 3
                reuse_request_failure         = 4
                create_order_failure          = 5
                export_request_failed         = 6
                configuration_error           = 7
                general_failure               = 8
                OTHERS                        = 9.             "#EC EXISTS

            IF sy-subrc <> 0.
              MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                      RAISING configuration_error.
            ELSE.
                p_twin = ls_toc-trkorr.
            ENDIF.

            CALL FUNCTION 'ZUPDATE_TRANSPORT_REQUEST'
              DESTINATION gv_destination
              EXPORTING
                trkorr  = ls_toc-trkorr
                as4text = lv_as4text.

*         Write the orginal TR and the test TR into log table
            SELECT *
              FROM /sdf/cmo_toc_log
              INTO TABLE lt_toc_log
              WHERE orig_transport = lv_ori_tr
                AND active = 'X'.                 "#EC*

            IF sy-subrc = 0.
              READ TABLE lt_toc_log INDEX 1.
              lt_toc_log-active = ''.
              MODIFY lt_toc_log TRANSPORTING active
                WHERE orig_transport = lv_ori_tr.
            ENDIF.

            lt_toc_log-orig_transport = lv_ori_tr.
            lt_toc_log-test_transport = ls_toc-trkorr.
            lt_toc_log-create_date = sy-datum.
            lt_toc_log-create_time = sy-uzeit.
            lt_toc_log-active = 'X'.
            APPEND lt_toc_log.
            MODIFY /sdf/cmo_toc_log FROM TABLE lt_toc_log.

" START #DARORA 21122018
" Display 'TWIN TR successful' message only when calling program is ZCREATE_TWIN_TRANSPORT

            if sy-cprog = 'ZCREATE_TWIN_TRANSPORT'.
            MESSAGE i333(s1) WITH ls_toc-trkorr ' - Twin TR released successfully from'
                   ls_target-sysname  ls_target-client.     "#EC NOTEXT
            Endif.

" END #DARORA 21122018

          ENDLOOP.
          EXIT.


*** // To create Twin Transport from TOC Trasnports Added by Tushar Choksi - End
        ELSE.
*       No import -> Exit loop when transport is released.
          EXIT.
        ENDIF.
      ELSE.
*     Check again if release is done after 10 seconds
        WAIT UP TO 10 SECONDS.
      ENDIF.

    ENDDO.

  ENDIF.


  rspar_line-selname = 'PV_KORR'.
  rspar_line-kind    = 'S'.
  rspar_line-sign    = 'I'.
  rspar_line-option  = 'EQ'.
  rspar_line-low     = ls_toc-trkorr .
  APPEND rspar_line TO rspar_tab.

if sy-cprog = 'ZCREATE_TWIN_TRANSPORT'.
  SUBMIT rddprott USING SELECTION-SCREEN '1000'
                  WITH SELECTION-TABLE rspar_tab
                  AND RETURN.
Endif.

ENDFORM.                    "Create_ToC


*&---------------------------------------------------------------------*
*&      Form  display_toc
*&---------------------------------------------------------------------*

FORM display_toc.

  SELECT *
    FROM /sdf/cmo_toc_log
    INTO TABLE lt_toc_log
    WHERE orig_transport = p_ori_tr.  "#EC*

  IF sy-subrc <> 0.
    MESSAGE i333(s1) WITH 'No test transport found!'.       "#EC NOTEXT
  ELSE.
    CALL FUNCTION '/SDF/DISPLAY_TABLE'
      TABLES
        table = lt_toc_log.
  ENDIF.

  CLEAR lt_toc_log.
  REFRESH lt_toc_log[].

ENDFORM.                    "display_ToC

*

INCLUDE zcreate_twin_transport_rfcf01.

INCLUDE zcreate_twin_transport_traf01.

*----------------------------------------------------------------------*
***INCLUDE /SDF/_TR_CHECK_GET_SID_RFCF01 .
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  get_rfc
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_TARGET  text
*      <--P_LV_RFC  text
*----------------------------------------------------------------------*
FORM get_rfc  USING    p_p_target TYPE tr_target
                  CHANGING p_lv_rfc TYPE rfcdest.
  DATA: lv_rfcstring TYPE rfcdest,
        lv_sysid     TYPE tmssysnam.

  DATA : lv_ping_status  TYPE /sdf/e2e_traffic_light_numeric,
         lv_logon_status TYPE /sdf/e2e_traffic_light_numeric.

  IF p_p_target(1) = '/'.
    MESSAGE i333(s1) WITH 'Transport groups are not allowed'
                          'in this check.'.                 "#EC NOTEXT
    EXIT.
  ENDIF.

  IF p_p_target+3(1) = '.'.
    lv_sysid = p_p_target(3).
  ELSE.
    lv_sysid = p_p_target.
  ENDIF.

* Try to get RFCDEST from table /SDF/CMO_TARGET
  SELECT SINGLE rfcdest FROM /sdf/cmo_target
    INTO p_lv_rfc
   WHERE tr_target = p_p_target.

* If no RFC destination is maintained, use TMSSUP connection
  IF sy-subrc NE 0 OR p_lv_rfc EQ space.
    CONCATENATE 'TMSSUP@' lv_sysid '.%' INTO lv_rfcstring.
    SELECT SINGLE rfcdest FROM rfcdes
      INTO p_lv_rfc
     WHERE rfcdest LIKE lv_rfcstring.                   "#EC CI_GENBUFF
  ENDIF.

*Check if TMSSUP*** RFC is working
*IF ping_status = 1 , Its success and RFC WORKS
  CALL FUNCTION '/SDF/RFC_CHECK'
    EXPORTING
      iv_destination  = p_lv_rfc
      iv_ping         = 'X'
      iv_logon        = 'X'
      iv_latency      = 'X'
    IMPORTING
      ev_ping_status  = lv_ping_status
      ev_logon_status = lv_logon_status.

*If ping was not success show error
  IF lv_ping_status <> 1.
*
    MESSAGE e333(s1) WITH
 '(PING)Not able to reach the RFC destination'.             "#EC NOTEXT
    EXIT.

*If logon data not available in RFC , Show Logon screen and handle
*RFC problems if any
  ELSEIF lv_logon_status = 3.

    CALL FUNCTION 'SVRS_GET_VERSION_FUNC_40' DESTINATION lv_rfc
      EXPORTING
        object_name           = '/SDF/TEAP_ENVI_ANA'
        versno                = '00000'
      EXCEPTIONS
        communication_failure = 1 MESSAGE sy-lisel
        system_failure        = 2 MESSAGE sy-lisel
        no_version            = 3
        OTHERS                = 4.

    IF sy-subrc BETWEEN 1 AND 2.
      MESSAGE e333(s1) WITH
       'Execution cancelled by user during RFC Logon'.      "#EC NOTEXT
      EXIT.

    ENDIF.
  ENDIF.

ENDFORM.                    " get_sid_rfc
*&---------------------------------------------------------------------*
*&      Form  CUSTOMIZATION_VALIDATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM customization_validation .
  DATA : lt_dd02v          TYPE STANDARD TABLE OF dd02v WITH HEADER LINE,
         lt_zxdynamic_func TYPE STANDARD TABLE OF zxdynamic_func WITH HEADER LINE.

* 1] Check table type should not be pool
  SELECT  * FROM          dd02v
    INTO TABLE            lt_dd02v
    FOR ALL ENTRIES IN    gt_ztr_detail_info
    WHERE                 tabname = gt_ztr_detail_info-obj_name(30)
    AND                   tabclass = 'POOL'.

  IF sy-subrc EQ 0.
    LOOP AT lt_dd02v.
      wa_header-typ  = 'A'.
      CONCATENATE lt_dd02v-tabname ls_line
             INTO ls_line.
    ENDLOOP.

    CONCATENATE ls_line TEXT-014
           INTO ls_line
   SEPARATED BY space.

    wa_header-info = ls_line.

    APPEND ls_line TO lt_line.
    CLEAR: wa_header, ls_line.
  ENDIF.

* 2] Check Exceptional manual alignment case maiintained in HC framework.
** HC Framework ID : TWINTRANSP
  SELECT *
    INTO TABLE  lt_zxdynamic_func
    FROM        zxdynamic_func
    WHERE id      EQ 'TWINTRANSP'
    AND   enabled = 'X'.


  LOOP AT lt_zxdynamic_func.
    READ TABLE gt_ztr_detail_info INTO gs_ztr_detail_info
    WITH KEY  object    = lt_zxdynamic_func-value1
              obj_name  = lt_zxdynamic_func-value2 .

    IF sy-subrc EQ 0.
      wa_header-typ  = 'A'.
      ls_line = TEXT-015 .
      wa_header-info = ls_line.
      APPEND ls_line TO lt_line.
      CLEAR: wa_header, ls_line.
      gv_flag_excptmanual = 'X'.
      CLEAR go_toc_flag .
      EXIT.
    ENDIF.
  ENDLOOP.


ENDFORM.

*&---------------------------------------------------------------------*
*&  Include           ZCREATE_TWIN_TRANSPORT_TOP
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&  Include           ZZ_SDF_CMO_TOC_TOP
*&---------------------------------------------------------------------*
TABLES : sscrfields, e070a.
TYPE-POOLS : icon.

DATA: ls_toc              TYPE tr001,
      ls_order            TYPE tr001,
      lv_trstatus         TYPE e070-trstatus,
      lv_retcode          TYPE char3,
      lv_message          TYPE text80,
      lv_target           TYPE tr_target,
      lv_ori_tr           TYPE e070-trkorr VALUE 'X',
      lv_dev_sid          TYPE tmssysnam,
      lv_sid              TYPE tmssysnam,
      lv_rfc              TYPE rfcdest,
      lv_start_date       LIKE sy-datum,
      lv_period           TYPE i,
      lv_domain(10)       TYPE c,
      lv_time_stamp(14)   TYPE c,
      ls_time_stamp       TYPE timestamp,
      lv_no_export, lv_autoimport, lv_f4_targets,
      lv_ign_attrib       TYPE flag,
      lt_requests         TYPE TABLE OF cts_req WITH HEADER LINE,
      lt_targeth          TYPE trsysclis WITH HEADER LINE,
      lt_target           TYPE trsysclis,
      ls_target           LIKE LINE OF lt_target,
      lv_tr_target        TYPE  tr_target,
      ls_sys              TYPE tmscsys,
      lt_toc_log          TYPE TABLE OF /sdf/cmo_toc_log WITH HEADER LINE,
      lt_reqs             TYPE TABLE OF e070 WITH HEADER LINE,
      ls_reqs             TYPE e070,
      lt_envanal_res_err  TYPE TABLE OF /sdf/teap_envi_ana_result
         WITH HEADER LINE,
      lt_tmstpalog        LIKE TABLE OF tmstpalog,
      lt_tmstpalog_h      TYPE tmstpalogs WITH HEADER LINE,
      lt_tr_wrong_scv     TYPE TABLE OF /sdf/teap_tr_wrong_scv
         WITH HEADER LINE,
      lt_scv_crit_obj     TYPE TABLE OF /sdf/teap_scv_crit_obj
         WITH HEADER LINE,
      lt_dgp_conf         TYPE TABLE OF /sdf/teap_dgp_conflict
         WITH HEADER LINE,
      lv_as4text          TYPE as4text,
      rspar_tab           TYPE TABLE OF rsparams,
      rspar_line          LIKE LINE OF rspar_tab,
      gv_destination      TYPE string,
      gv_flag_excptmanual TYPE char1 VALUE  'X',
      go_toc_flag         TYPE char1.

TYPES : BEGIN OF ty_trattributes ,
          trkorr    TYPE trkorr,
          pos       TYPE ddposition,
          attribute TYPE trattr,
          reference TYPE trvalue,
        END OF ty_trattributes.

DATA : ls_trattributes TYPE ty_trattributes,
       lt_trattributes TYPE TABLE OF ty_trattributes.

DATA : lt_zxdynamic_func   TYPE STANDARD TABLE OF zxdynamic_func WITH HEADER LINE,
       lt_ztr_detail_info  TYPE STANDARD TABLE OF ztr_detail_info WITH HEADER LINE,
       gt_ztr_detail_info  TYPE STANDARD TABLE OF  ztr_detail_info,
       gt_ztr_detail_info2 TYPE STANDARD TABLE OF  ztr_detail_info,
       lt_dd02v            TYPE STANDARD TABLE OF dd02v WITH HEADER LINE,
       lv_as4date          TYPE as4date,
*       p_table TYPE dd02l-tabname VALUE 'ZTR_DETAIL_INFO',
       lt_header           TYPE slis_t_listheader,
       lt_footer           TYPE TABLE OF slis_t_listheader,
       wa_footer           TYPE slis_listheader,
       wa_header           TYPE slis_listheader,
       ls_line             TYPE char100,
       ld_lines            TYPE i,
       ld_linesc(10)       TYPE c,
       lv_header           TYPE c,
       gs_ztr_detail_info  LIKE LINE OF lt_ztr_detail_info,
       gv_ev_tp_ret_code    TYPE  stpa-retcode,
       gv_ev_tp_alog       TYPE  stpa-file,
       gv_ev_tp_slog       TYPE  stpa-file,
       gv_ev_tp_pid        TYPE  stpa-pid,
       gv_ev_tpstat_key    TYPE  tmstpkey,
       gv_es_exception     TYPE  stmscalert.

DATA: BEGIN OF lt_line OCCURS 0,
        ls_line TYPE char100,
      END OF lt_line.

DATA: lr_functions   TYPE REF TO cl_salv_functions_list,
      go_alv         TYPE REF TO cl_salv_table,
      i_start_column TYPE i VALUE 5,
      i_end_column   TYPE i VALUE 200,
      i_start_line   TYPE i VALUE 10,
      i_end_line     TYPE i VALUE 15.

SELECT SINGLE value1
  INTO        gv_destination
  FROM        zxdynamic_func
  WHERE       id  = 'TWINTRANSP'
  AND criteria1   = 'DESTINATIO'  .

CALL FUNCTION 'RFC_GET_SYSTEM_INFO'
  EXPORTING
    destination             = gv_destination
  EXCEPTIONS
    authority_not_available = 1
    OTHERS                  = 2.

IF sy-subrc <> 0.
  MESSAGE text-020 TYPE 'A' .
ENDIF.



SELECTION-SCREEN BEGIN OF BLOCK b_tr_detail WITH FRAME TITLE text-001.
SELECTION-SCREEN SKIP.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 3(20) text-002 FOR FIELD p_ori_tr.
PARAMETERS: p_ori_tr TYPE e070-trkorr.
PARAMETERS p_toc    TYPE e070-trkorr NO-DISPLAY.
PARAMETERS p_twin   TYPE e070-trkorr NO-DISPLAY.
* OBLIGATORY.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 3(20) text-003 FOR FIELD p_target.
PARAMETERS p_target TYPE /sdf/cmo_tr_target .
* OBLIGATORY.
*          DEFAULT text-011 AS LISTBOX VISIBLE LENGTH 12.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK b_tr_detail.


SELECTION-SCREEN SKIP.

SELECTION-SCREEN BEGIN OF BLOCK b_tr_toc WITH FRAME TITLE text-009.
SELECTION-SCREEN SKIP.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN PUSHBUTTON  3(21) text-004 USER-COMMAND pb_create.
SELECTION-SCREEN PUSHBUTTON 30(21) text-005 USER-COMMAND pb_show.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK b_tr_toc.
SELECTION-SCREEN FUNCTION KEY 1.

MOVE '@0S@' TO sscrfields-functxt_01.

*----------------------------------------------------------------------*
***INCLUDE ZZ_SDF_CMO_TOC_VALIDATE_TRAF01.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  VALIDATE_TRANSPORT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM validate_transport .


    SELECT SINGLE value1
    INTO        gv_destination
    FROM        zxdynamic_func
    WHERE       id  = 'TWINTRANSP'
    AND criteria1   = 'DESTINATIO'  .

  CALL FUNCTION 'RFC_GET_SYSTEM_INFO'
    EXPORTING
      destination             = gv_destination
    EXCEPTIONS
      authority_not_available = 1
      OTHERS                  = 2.

  IF sy-subrc <> 0.
    MESSAGE TEXT-020 TYPE 'A' .
  ENDIF.


****  Fetch Transport's basic information
  SELECT *  INTO TABLE gt_ztr_detail_info FROM ztr_detail_info WHERE trkorr EQ p_ori_tr.

  CHECK sy-subrc EQ 0 .

  IF gt_ztr_detail_info IS INITIAL.
    MESSAGE 'Invalid TR number kindly check' TYPE 'E'.
  ENDIF.

*** Get all transports in local system for objects in BAU TR
  SELECT a~trkorr a~trfunction a~trstatus a~tarsystem a~korrdev a~as4user a~as4date a~as4time a~strkorr
         b~as4pos b~pgmid b~object b~obj_name b~objfunc b~lockflag b~gennum b~lang b~activity
   INTO CORRESPONDING FIELDS OF TABLE gt_ztr_detail_info2
*      FROM (p_table)
    FROM e070 AS a INNER JOIN e071 AS b ON
         a~trkorr EQ b~trkorr
    FOR ALL ENTRIES IN gt_ztr_detail_info
    WHERE b~object    EQ gt_ztr_detail_info-object
    AND   b~obj_name  EQ gt_ztr_detail_info-obj_name
    AND   a~as4date   GT gt_ztr_detail_info-as4date.

*** Validate Transports
  READ TABLE gt_ztr_detail_info INTO gs_ztr_detail_info INDEX 1.

  IF gs_ztr_detail_info-trfunction EQ 'K'.
    PERFORM workbench_validation.
  ELSEIF gs_ztr_detail_info-trfunction EQ 'W'.
    PERFORM customize_validation.
  ENDIF.

  DESCRIBE TABLE lt_line LINES DATA(lv_lines).

  IF lv_lines IS NOT INITIAL.   "In any case TR cannot be TOCed than show popup message
    TRY.
        cl_salv_table=>factory(
          IMPORTING
            r_salv_table = go_alv
          CHANGING
            t_table      = lt_line[] ).
      CATCH cx_salv_msg.
    ENDTRY.


    lr_functions = go_alv->get_functions( ).
    lr_functions->set_all( 'X' ).

** Display Popup message with all generated text
    IF go_alv IS BOUND.
      go_alv->set_screen_popup(
        start_column = i_start_column
        end_column  = i_end_column
        start_line  = i_start_line
        end_line    = i_end_line ).

      go_alv->display( ).
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHECK_WORKBENCH_VALIDATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM workbench_validation .
  DATA : lv_value1  TYPE char10,
         lv_p_ident TYPE dats.


  SELECT SINGLE value1
    INTO    lv_value1
    FROM    zxdynamic_func
    WHERE   id        EQ 'TWINTRANSP'
    AND     enabled   = 'X'
    AND     criteria1 = 'RELEASEDAT' .

  lv_p_ident = lv_value1.

  CALL FUNCTION 'RFC_GET_SYSTEM_INFO'
    EXPORTING
      destination             = gv_destination
    EXCEPTIONS
      authority_not_available = 1
      OTHERS                  = 2.

  IF sy-subrc <> 0.
    MESSAGE TEXT-020 TYPE 'A' .
  ENDIF.

  CALL FUNCTION 'ZBC_OBJECTS_IN_TRNASPORT2'
    DESTINATION gv_destination
    EXPORTING
      identifier        = lv_p_ident
    TABLES
      gt_tr_detail_info = gt_ztr_detail_info
    CHANGING
      ex_toc_flag       = go_toc_flag.

  APPEND LINES OF gt_ztr_detail_info2 TO gt_ztr_detail_info.

  DELETE ADJACENT DUPLICATES FROM gt_ztr_detail_info .

  READ TABLE gt_ztr_detail_info INTO gs_ztr_detail_info WITH KEY trkorr = p_ori_tr  .

  LOOP AT gt_ztr_detail_info INTO gs_ztr_detail_info
  WHERE trkorr NE p_ori_tr
  AND trfunction NE 'W'.

** In case any object is locked in other BAU TR , than keep alignmnet on hold
    IF gs_ztr_detail_info-trkorr(3) = p_ori_tr(3) AND gs_ztr_detail_info-trstatus EQ 'D'.
      wa_header-typ  = 'A'.
      CONCATENATE   TEXT-013 gs_ztr_detail_info-obj_name TEXT-021 gs_ztr_detail_info-trkorr
      INTO          ls_line
      SEPARATED BY  space.
      APPEND        ls_line TO lt_line.
      MESSAGE ls_line TYPE 'E'.
      CLEAR:        wa_header, ls_line, go_toc_flag .
    ENDIF.

** In any object is locked in PRJ landscape after last cut over than Manual alignment must be done
    IF gs_ztr_detail_info-trkorr(3) NE p_ori_tr(3) AND gs_ztr_detail_info-lockflag EQ 'D'.
      CONCATENATE TEXT-024 gs_ztr_detail_info-obj_name TEXT-026 gs_ztr_detail_info-trkorr
      INTO ls_line
      SEPARATED BY space.
      CLEAR gs_ztr_detail_info-lockflag.

      MODIFY gt_ztr_detail_info FROM gs_ztr_detail_info TRANSPORTING lockflag.


      APPEND ls_line TO lt_line.
      MESSAGE ls_line TYPE  'E'.
      CLEAR:        wa_header, ls_line, go_toc_flag .
    ENDIF.

  ENDLOOP.

  DELETE ADJACENT DUPLICATES FROM : gt_ztr_detail_info , lt_line.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHECK_CUSTOMIZE_VALIDATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM customize_validation .

* 1] Check table type should not be pool
  SELECT  * FROM          dd02v
    INTO TABLE            lt_dd02v
    FOR ALL ENTRIES IN    gt_ztr_detail_info
    WHERE                 tabname = gt_ztr_detail_info-obj_name(30)
    AND                   tabclass = 'POOL'.

  IF sy-subrc EQ 0.
    LOOP AT lt_dd02v.
      wa_header-typ  = 'A'.
      CONCATENATE lt_dd02v-tabname ls_line INTO ls_line.
    ENDLOOP.

    CONCATENATE ls_line TEXT-012
      INTO ls_line SEPARATED BY space.

    wa_header-info = ls_line.

    APPEND ls_line TO lt_line.
    CLEAR: wa_header, ls_line.
  ENDIF.

* 2] Check Exceptional manual alignment case

  SELECT *
    INTO TABLE lt_zxdynamic_func
    FROM zxdynamic_func
    WHERE id EQ 'TWINTRANSP'
    AND   enabled = 'X'.


  LOOP AT lt_zxdynamic_func.
    READ TABLE gt_ztr_detail_info INTO gs_ztr_detail_info
    WITH KEY  object    = lt_zxdynamic_func-value1
              obj_name  = lt_zxdynamic_func-value2 .

    IF sy-subrc EQ 0.
      wa_header-typ  = 'A'.
      ls_line = TEXT-014 .
      wa_header-info = ls_line.
      APPEND ls_line TO lt_line.
      MESSAGE ls_line TYPE 'A'.
      CLEAR: wa_header, ls_line.
      EXIT.
    ENDIF.
  ENDLOOP.

ENDFORM.

*****************************************************************************************************************************
**  This program is developed for Twin Transport Alignment team based on experience and KT given by Accenture
**  This is useful only for Twin Transport Team and will not be used by anyone else.  It will be useful only
**  for non-productive purpose hence never copied to Q*,A*,Z* systems
**  Any query related to this kindly contact DL-EVO-VSSI-Twin-Transport@vodafone.com
**  Solution Architect + Developer  :   Tushar Choksi  [ tushar.choksi02@vodafone.com  ]
**  Date                            :   11-Sep-2016
**  Transport Number                :   EE1K949929
*******************************************************************************************************************************

REPORT zbc_analyze_transport.
INCLUDE zbc_analyze_transport_top.
INCLUDE zbc_analyze_transport_sub.

LOAD-OF-PROGRAM.

  SELECT SINGLE value1
    INTO        lv_releasedt
    FROM        zxdynamic_func
    WHERE       id  = 'TWINTRANSP'
    AND criteria1   = 'RELEASEDAT'  .

  gv_releasedt = lv_releasedt.


**initialization event
INITIALIZATION.


*start of selection event
START-OF-SELECTION.

END-OF-SELECTION.

  SELECT *  INTO TABLE gt_ztr_detail_info FROM (p_table) WHERE trkorr IN s_trkorr.

  DELETE ADJACENT DUPLICATES FROM gt_ztr_detail_info COMPARING object obj_name.

  CHECK gt_ztr_detail_info IS NOT INITIAL.

  SELECT DISTINCT a~trkorr c~as4text a~trfunction a~trstatus a~tarsystem a~korrdev a~as4user a~as4date a~as4time a~strkorr
                  b~as4pos b~pgmid b~object b~obj_name b~objfunc b~lockflag b~gennum b~lang b~activity
   APPENDING CORRESPONDING FIELDS OF TABLE gt_ztr_detail_info2
    FROM e070 AS a
    INNER JOIN e071 AS b ON a~trkorr EQ b~trkorr
    INNER JOIN e07t AS c ON a~trkorr EQ c~trkorr
    FOR ALL ENTRIES IN gt_ztr_detail_info
    WHERE   b~object    EQ gt_ztr_detail_info-object
      AND   b~obj_name  EQ gt_ztr_detail_info-obj_name
      AND   as4date   GT lv_releasedt  .

  DELETE ADJACENT DUPLICATES FROM gt_ztr_detail_info2 COMPARING trkorr object obj_name.

  APPEND LINES OF gt_ztr_detail_info2 TO gt_ztr_detail_info.

  ASSIGN gt_ztr_detail_info TO <it_table> .

  SORT gt_ztr_detail_info BY as4date trkorr.

  PERFORM validate_data.

  PERFORM build_events.

  PERFORM generate_output  .
  
  *****************************************************************************************************************************
**  This program is developed for Twin Transport Alignment team based on experience and KT given by Accenture
**  This is useful only for Twin Transport Team and will not be used by anyone else.  It will be useful only
**  for non-productive purpose hence never copied to Q*,A*,Z* systems
**  Any query related to this kindly contact DL-EVO-VSSI-Twin-Transport@vodafone.com
**  Solution Architect + Developer  :   Tushar Choksi  [ tushar.choksi02@vodafone.com  ]
**  Date                            :   11-Sep-2016
**  Transport Number                :   EE1K949929
*******************************************************************************************************************************



*&---------------------------------------------------------------------*
*&  Include           ZBC_ANALYZE_TRANSPORT_SUB
*&---------------------------------------------------------------------*

FORM generate_output.


*texts for grid title
  t1 = TEXT-001.
  CONCATENATE t1 t2 INTO t3 SEPARATED BY space.
* Dynamic creation of a structure
  CREATE DATA gs_structure TYPE (p_table).
  ASSIGN gs_structure->* TO <dyn_str>.
* Fields Structure
  struc_desc ?= cl_abap_typedescr=>describe_by_data( <dyn_str> ).

  READ TABLE gt_ztr_detail_info INTO gs_ztr_detail_info WITH KEY trkorr = s_trkorr-low.

  LOOP AT struc_desc->components ASSIGNING <str_comp>.
*   Build Fieldcatalog
    ls_fieldcatalogue-fieldname = <str_comp>-name.
    ls_fieldcatalogue-ref_tabname = p_table.

    CASE  <str_comp>-name  .
      WHEN 'TRKORR'.
        ls_fieldcatalogue-hotspot = 'X'.
      WHEN 'OBJ_NAME' .
        IF gs_ztr_detail_info-trfunction EQ 'W'.
          ls_fieldcatalogue-hotspot = 'X'.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
    APPEND ls_fieldcatalogue TO lt_fieldcatalogue.
    CLEAR ls_fieldcatalogue.

  ENDLOOP.

* ALV Layout
  lt_layout-zebra = 'X'.
  lt_layout-colwidth_optimize = 'X'.
  lt_layout-window_titlebar = t3.


*ALV  output
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_pf_status_set    = 'SET_PF_STATUS'
      i_callback_user_command     = 'USER_COMMAND'
      i_callback_program          = sy-repid
      i_callback_top_of_page      = 'TOP-OF-PAGE'  "see FORM
      is_layout                   = lt_layout
      it_fieldcat                 = lt_fieldcatalogue
      i_callback_html_end_of_list = 'HTML_END_OF_LIST'
      it_events                   = gt_events
      i_save                      = 'X'
    TABLES
      t_outtab                    = <it_table>
    EXCEPTIONS
      program_error               = 1
      OTHERS                      = 2.

  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  VALIDATE_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM validate_data .
  READ TABLE gt_ztr_detail_info INTO gs_ztr_detail_info WITH KEY trkorr = s_trkorr-low .

  IF gs_ztr_detail_info-trfunction EQ 'K'.
    PERFORM workbench_validation.
  ELSEIF gs_ztr_detail_info-trfunction EQ 'W'.
    PERFORM customization_validation.
  ENDIF.


ENDFORM.

*-------------------------------------------------------------------*
* Form  TOP-OF-PAGE                                                 *
*-------------------------------------------------------------------*
* ALV Report Header                                                 *
*-------------------------------------------------------------------*
FORM top-of-page.
*ALV Header declarations
  CHECK lv_header IS INITIAL.
* Title
  wa_header-typ  = 'H'.


  CONCATENATE TEXT-010 s_trkorr-low INTO  wa_header-info SEPARATED BY '-'.
  APPEND wa_header TO lt_header.
  CLEAR wa_header.

* Date
  wa_header-typ  = 'S'.
  wa_header-key = 'Date: '.
  CONCATENATE  sy-datum+6(2) '.'
               sy-datum+4(2) '.'
               sy-datum(4) INTO wa_header-info.   "todays date
  APPEND wa_header TO lt_header.
  CLEAR: wa_header.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      it_list_commentary = lt_header.
**            i_logo             = 'Z_LOGO'.

  lv_header = 'X'.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  BUILD_EVENTS
*&---------------------------------------------------------------------*
*       Build events table
*----------------------------------------------------------------------*
FORM build_events.
  DATA: ls_event TYPE slis_alv_event.

  CALL FUNCTION 'REUSE_ALV_EVENTS_GET'
    EXPORTING
      i_list_type = 0
    IMPORTING
      et_events   = gt_events[].

  READ TABLE gt_events WITH KEY name =  slis_ev_end_of_list
                             INTO ls_event.
  IF sy-subrc = 0.
*    MOVE 'END_OF_LIST' TO ls_event-form.
*    APPEND ls_event TO gt_events.
  ENDIF.

ENDFORM.                    " BUILD_EVENTS

*&---------------------------------------------------------------------*
*&      Form  END_OF_LIST
*&---------------------------------------------------------------------*
FORM html_end_of_list USING cl_dd TYPE REF TO cl_dd_document.
  DATA: r_dd_table            TYPE REF TO cl_dd_table_area,
        lv_sdydo_text_element TYPE sdydo_text_element,
        lv_count              TYPE i.

  "add heading
  CALL METHOD cl_dd->add_text
    EXPORTING
      text      = TEXT-011
      sap_style = cl_dd_area=>heading.

  "underline and new line
  CALL METHOD cl_dd->underline.

  CALL METHOD cl_dd->new_line.

  "add quick table with two columns
  CALL METHOD cl_dd->add_table
    EXPORTING
      no_of_columns = 1
      border        = '1'
      width         = '90%'  "you can set any width of top area in %
    IMPORTING
      tablearea     = r_dd_table.

  "first row
  CALL METHOD r_dd_table->new_row.

  DESCRIBE TABLE lt_line LINES lv_count.

  IF lv_count GT 0.
    LOOP AT lt_line INTO ls_line.
      CALL METHOD r_dd_table->new_row.
      lv_sdydo_text_element = ls_line.
      "fill columns in second row
      CALL METHOD r_dd_table->add_text
        EXPORTING
          text      = lv_sdydo_text_element
          sap_color = cl_dd_area=>list_key_int.

    ENDLOOP.
  ELSE.
    CALL METHOD r_dd_table->new_row.

    ls_line = TEXT-012.

    lv_sdydo_text_element = ls_line.
    "fill columns in second row
    CALL METHOD r_dd_table->add_text
      EXPORTING
        text      = lv_sdydo_text_element
        sap_color = cl_dd_area=>list_key_int.
  ENDIF.

  "request for second row
  CALL METHOD r_dd_table->new_row.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  WORKBENCH_VALIDATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM workbench_validation .
  DATA : lv_value1  TYPE char10,
         lv_p_ident TYPE dats,
         lv_as4date TYPE ztr_detail_info-as4date.

  SELECT SINGLE value1
    INTO    lv_value1
    FROM    zxdynamic_func
    WHERE   id        EQ 'TWINTRANSP'
    AND     enabled   = 'X'
    AND     criteria1 = 'RELEASEDAT' .

  lv_p_ident = lv_value1.

  CALL FUNCTION 'RFC_GET_SYSTEM_INFO'
    EXPORTING
      destination             = gv_destination
    EXCEPTIONS
      authority_not_available = 1
      OTHERS                  = 2.

  IF sy-subrc <> 0.
    MESSAGE TEXT-020 TYPE 'A' .
  ENDIF.

  CALL FUNCTION 'ZBC_OBJECTS_IN_TRNASPORT2'
    DESTINATION gv_destination
    EXPORTING
      identifier        = p_ident
    TABLES
      gt_tr_detail_info = gt_ztr_detail_info
    CHANGING
      ex_toc_flag       = go_toc_flag.

  APPEND LINES OF gt_ztr_detail_info2 TO gt_ztr_detail_info.

  SORT gt_ztr_detail_info BY trkorr object obj_name.

  DELETE ADJACENT DUPLICATES FROM gt_ztr_detail_info COMPARING trkorr object obj_name .

*  DELETE gt_ztr_detail_info WHERE trfunction NE 'K'.

  SORT gt_ztr_detail_info BY trkorr object obj_name.

  READ TABLE gt_ztr_detail_info INTO gs_ztr_detail_info WITH KEY trkorr = s_trkorr-low  .

  lv_as4date = gs_ztr_detail_info-as4date.

  LOOP AT gt_ztr_detail_info INTO gs_ztr_detail_info
  WHERE trkorr NE s_trkorr-low
  AND trfunction EQ 'K'.

    IF gs_ztr_detail_info-object = 'TABU' OR
       gs_ztr_detail_info-object = 'VDAT' OR
       gs_ztr_detail_info-object = 'ACGR' OR
       gs_ztr_detail_info-object = 'F30'  OR
       gs_ztr_detail_info-object = 'FTXP'.
      PERFORM display_message USING    gs_ztr_detail_info
                              CHANGING ls_line.
      APPEND ls_line TO lt_line.
    ENDIF.

* In case any object is locked in other BAU TR , than keep alignmnet on hold
    IF    gs_ztr_detail_info-trkorr(3) = s_trkorr-low(3) AND gs_ztr_detail_info-trstatus EQ 'D'  .
      wa_header-typ  = 'A'.
      CONCATENATE   TEXT-013 gs_ztr_detail_info-obj_name TEXT-005 gs_ztr_detail_info-trkorr
      INTO          ls_line
      SEPARATED BY  space.
      APPEND        ls_line TO lt_line.
      CLEAR:        wa_header, ls_line, go_toc_flag .
    ENDIF.

** In any TR exists in PRJ landscape after last cut over than Manual alignment must be done
    IF    gs_ztr_detail_info-trkorr(3) NE s_trkorr-low(3)
      AND gs_ztr_detail_info-trstatus EQ 'R'
      AND gs_ztr_detail_info-lockflag NE 'T'.

      PERFORM check_change_exists_in_bau.

    ENDIF.

    IF gs_ztr_detail_info-trkorr(3) NE s_trkorr-low(3)
      AND gs_ztr_detail_info-trstatus EQ 'D'
      AND gs_ztr_detail_info-lockflag NE 'T'.

      CONCATENATE TEXT-008 gs_ztr_detail_info-obj_name TEXT-026 gs_ztr_detail_info-trkorr
      INTO        ls_line
      SEPARATED BY space.

      CLEAR gs_ztr_detail_info-lockflag.
      MODIFY gt_ztr_detail_info FROM gs_ztr_detail_info TRANSPORTING lockflag.
      APPEND ls_line TO lt_line.
      CLEAR:        wa_header, ls_line, go_toc_flag .
    ENDIF.


    IF gs_ztr_detail_info-trkorr(3) NE s_trkorr-low(3) AND gs_ztr_detail_info-lockflag EQ 'T'.

      CONCATENATE gs_ztr_detail_info-trkorr TEXT-024
      INTO        ls_line
      SEPARATED BY space.

      MODIFY gt_ztr_detail_info FROM gs_ztr_detail_info TRANSPORTING lockflag.
      APPEND ls_line TO lt_line.
      CLEAR:        wa_header, ls_line, gs_ztr_detail_info.
    ENDIF.

  ENDLOOP.

  SORT lt_line BY ls_line.

  DELETE ADJACENT DUPLICATES FROM lt_line .

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CUSTOMIZATION_VALIDATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM customization_validation .
  DATA : lt_dd02v          TYPE STANDARD TABLE OF dd02v WITH HEADER LINE,
         lt_zxdynamic_func TYPE STANDARD TABLE OF zxdynamic_func WITH HEADER LINE.

  DELETE gt_ztr_detail_info WHERE trfunction NE 'W'.

* 1] Check table type should not be pool
  SELECT  * FROM          dd02v
    INTO TABLE            lt_dd02v
    FOR ALL ENTRIES IN    gt_ztr_detail_info
    WHERE                 tabname = gt_ztr_detail_info-obj_name(30)
    AND                   tabclass = 'POOL'.

  DELETE ADJACENT DUPLICATES FROM lt_dd02v COMPARING tabname.

  IF sy-subrc EQ 0.

    LOOP AT lt_dd02v WHERE tabclass = 'POOL'.
      wa_header-typ  = 'A'.
      CONCATENATE lt_dd02v-tabname ls_line
             INTO ls_line
     SEPARATED BY space.

    ENDLOOP.

    CONCATENATE TEXT-014 ls_line
           INTO ls_line
   SEPARATED BY space.

    wa_header-info = ls_line.

    APPEND ls_line TO lt_line.
    CLEAR: wa_header, ls_line.

  ENDIF.

* 2] Check Exceptional manual alignment case maiintained in HC framework.
** HC Framework ID : TWINTRANSP
  SELECT *
    INTO TABLE  lt_zxdynamic_func
    FROM        zxdynamic_func
    WHERE id      EQ 'TWINTRANSP'
    AND   enabled = 'X'.


  LOOP AT lt_zxdynamic_func.
    READ TABLE gt_ztr_detail_info INTO gs_ztr_detail_info
    WITH KEY  object    = lt_zxdynamic_func-value1
              obj_name  = lt_zxdynamic_func-value2 .

    IF sy-subrc EQ 0.
      wa_header-typ  = 'A'.
      ls_line = TEXT-015 .
      wa_header-info = ls_line.
*        APPEND wa_header TO lt_footer.
      APPEND ls_line TO lt_line.
      CLEAR: wa_header, ls_line.
      gv_flag_excptmanual = 'X'.
      CLEAR go_toc_flag .
      EXIT.
    ENDIF.
  ENDLOOP.

***  Object Type Features - Exceptional Manual Alignment

  READ TABLE gt_ztr_detail_info INTO gs_ztr_detail_info
  WITH KEY  object    = 'PMKC' .
  IF sy-subrc EQ 0.
    wa_header-typ  = 'A'.
    ls_line = TEXT-015 .
    wa_header-info = ls_line.
*        APPEND wa_header TO lt_footer.
    APPEND ls_line TO lt_line.
    CLEAR: wa_header, ls_line.
    gv_flag_excptmanual = 'X'.
    CLEAR go_toc_flag .
  ENDIF.

  LOOP AT gt_ztr_detail_info INTO gs_ztr_detail_info.
    IF gs_ztr_detail_info-object = 'TABU' OR
    gs_ztr_detail_info-object = 'VDAT' OR
    gs_ztr_detail_info-object = 'ACGR' OR
    gs_ztr_detail_info-object = 'F30'  OR
    gs_ztr_detail_info-object = 'FTXP'.
      PERFORM display_message USING    gs_ztr_detail_info
                              CHANGING ls_line.
      APPEND ls_line TO lt_line.

    ENDIF.
    CLEAR gs_ztr_detail_info.
  ENDLOOP.


ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  set_pf_status
*&---------------------------------------------------------------------*
* set_pf_status
*----------------------------------------------------------------------*
FORM set_pf_status USING rt_extab TYPE slis_t_extab.

  SET PF-STATUS 'STANDARD' .

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  user_command
*&---------------------------------------------------------------------*
* user_command
*----------------------------------------------------------------------*
FORM user_command USING r_ucomm LIKE sy-ucomm
                    rs_selfield TYPE slis_selfield.

  DATA : rspar_tab  TYPE TABLE OF rsparams,
         rspar_line LIKE LINE OF rspar_tab.

  CASE r_ucomm.

    WHEN '&TOC'. " Perform create TOC + Twin Transport

      IF gv_flag_excptmanual EQ 'X' .
        MESSAGE TEXT-021 TYPE 'E'.
        EXIT.
      ENDIF.

      IF go_toc_flag NE 'X'.
        MESSAGE TEXT-022 TYPE 'E'.
        EXIT.
      ENDIF.

      rspar_line-selname = 'P_ORI_TR'.
      rspar_line-kind    = 'S'.
      rspar_line-sign    = 'I'.
      rspar_line-option  = 'EQ'.
      rspar_line-low     =  s_trkorr-low .
      APPEND rspar_line TO rspar_tab.

      rspar_line-selname = 'P_TARGET'.
      rspar_line-kind    = 'S'.
      rspar_line-sign    = 'I'.
      rspar_line-option  = 'EQ'.
      rspar_line-low     = 'DE1.100' .
      APPEND rspar_line TO rspar_tab.

      SUBMIT zcreate_twin_transport VIA SELECTION-SCREEN
                                    WITH SELECTION-TABLE rspar_tab
                                    AND RETURN.

    WHEN '&IC1'.  "ON Click of Line item
      READ TABLE gt_ztr_detail_info INTO gs_ztr_detail_info WITH KEY trkorr = s_trkorr-low.

      IF rs_selfield-fieldname = 'TRKORR'. "<--if user click transport
        PERFORM display_transport_log USING rs_selfield-tabindex. "index value of line you clicked
      ENDIF.

      IF rs_selfield-fieldname = 'OBJ_NAME' AND gs_ztr_detail_info-trfunction = 'W'.  "<--- if user click object name
        PERFORM display_object_key_values USING rs_selfield-tabindex.
      ENDIF.
    WHEN OTHERS.

  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_TRANSPORT_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_SELFIELD_TABINDEX  text
*----------------------------------------------------------------------*
FORM display_transport_log  USING    p_selfield_tabindex.

  DATA : rspar_tab  TYPE TABLE OF rsparams,
         rspar_line LIKE LINE OF rspar_tab.

  READ TABLE <it_table> ASSIGNING <dyn_str> INDEX p_selfield_tabindex.

  rspar_line-selname = 'PV_KORR'.
  rspar_line-kind    = 'S'.
  rspar_line-sign    = 'I'.
  rspar_line-option  = 'EQ'.
  rspar_line-low     = <dyn_str>(10) .
  APPEND rspar_line TO rspar_tab.

**** Display Transport log

  SUBMIT rddprott USING SELECTION-SCREEN '1000'
                  WITH SELECTION-TABLE rspar_tab
                  AND RETURN.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_OBJECT_KEY_VALUES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_SELFIELD_TABINDEX  text
*----------------------------------------------------------------------*
FORM display_object_key_values  USING    p_selfield_tabindex.

  DATA : lt_ztr_objkey_info TYPE TABLE OF ztr_objkey_info,
         lv_lines           TYPE i,
         lv_value1          TYPE char10,
         lv_last_release    TYPE dats,
         lv_exit            TYPE c.


  READ TABLE <it_table> ASSIGNING <dyn_str> INDEX p_selfield_tabindex.
**  seleect all key values selected in transport

  SELECT *
    INTO  TABLE  lt_ztr_objkey_info
    FROM  ztr_objkey_info
    WHERE trkorr = <dyn_str>(20)
    AND   mastertype = <dyn_str>+152(4)
    AND   mastername = <dyn_str>+156(120)
            .

** Current release start date
  SELECT SINGLE value1
    INTO lv_value1
    FROM zxdynamic_func
    WHERE id        = 'TWINTRANSP'
    AND   criteria1 = 'RELEASEDAT' .

  lv_last_release = lv_value1.

  DESCRIBE TABLE lt_ztr_objkey_info LINES lv_lines.

  lv_lines = lv_lines + 10.

*** Check system availablity
  CALL FUNCTION 'RFC_GET_SYSTEM_INFO'
    EXPORTING
      destination             = gv_destination
    EXCEPTIONS
      authority_not_available = 1
      OTHERS                  = 2.

  IF sy-subrc <> 0.
    MESSAGE TEXT-020 TYPE 'E' .
  ENDIF.

  CALL FUNCTION 'ZGET_OBJECT_KEY_INFO'
    DESTINATION gv_destination
    EXPORTING
      last_release_date  = lv_last_release
    TABLES
      gt_ztr_objkey_info = lt_ztr_objkey_info
    CHANGING
      gv_toc_flag        = go_toc_flag.

  SORT lt_ztr_objkey_info BY tabkey as4date as4time  .

** Display popup - with list of key values in both systems
  CALL FUNCTION 'REUSE_ALV_POPUP_TO_SELECT'
    EXPORTING
      i_title               = TEXT-018
      i_selection           = 'X'
      i_zebra               = 'X'
      i_screen_start_column = 20
      i_screen_start_line   = 5
      i_screen_end_column   = 180
      i_screen_end_line     = lv_lines
      i_scroll_to_sel_line  = 'X'
      i_tabname             = 2
      i_structure_name      = 'ZTR_OBJKEY_INFO'
    TABLES
      t_outtab              = lt_ztr_objkey_info.


  IF sy-subrc <> 0.
    MESSAGE TEXT-019 TYPE 'E'.
  ENDIF.

  IF lv_exit IS NOT INITIAL.
*   CLEAR go_toc_flag.
  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHECK_CHANGE_EXISTS_IN_BAU
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_change_exists_in_bau .
  DATA: lt_tt_cofi_lines TYPE STANDARD TABLE OF tstrfcofil,
        lt_de_tr_info    TYPE STANDARD TABLE OF ztr_detail_info,
        wa_tt_cofi_lines TYPE tstrfcofil,
        wa__de_tr_info   TYPE ztr_detail_info,
        lv_count         TYPE i,
        lv_as4date       TYPE as4date.

  SELECT SINGLE as4date INTO lv_as4date FROM ztr_detail_info WHERE trkorr = s_trkorr-low.



  IF    gs_ztr_detail_info-trkorr(3) NE s_trkorr-low(3)
        AND gs_ztr_detail_info-trstatus EQ 'R'
        AND gs_ztr_detail_info-lockflag NE 'T'.

    CALL FUNCTION 'ZREAD_STRF_READ_COFILE'
      DESTINATION gv_destination
      EXPORTING
        iv_trkorr        = gs_ztr_detail_info-trkorr
        iv_read_header   = 'X'
      TABLES
        lt_tt_cofi_lines = lt_tt_cofi_lines
      EXCEPTIONS
        wrong_call       = 1
        no_info_found    = 2
        OTHERS           = 3.

    CHECK sy-subrc EQ 0.

    DESCRIBE TABLE lt_tt_cofi_lines LINES lv_count.

    CHECK lv_count GT 0.

    LOOP AT lt_tt_cofi_lines INTO wa_tt_cofi_lines
      WHERE  tarsystem(1) = 'E' AND retcode EQ '8' OR
                                    tarsystem(1) = 'E' AND retcode EQ '12'.
      EXIT.
    ENDLOOP.

    READ TABLE lt_tt_cofi_lines INTO wa_tt_cofi_lines
     WITH KEY function = 'I' tarsystem(1) = 'E' .
** New Project TR created and not reached to E*, Mark it as Manual Alignment
    IF sy-subrc NE 0.
      CONCATENATE gs_ztr_detail_info-trkorr '-' TEXT-025 INTO ls_line
      SEPARATED BY space.
      wa_header-info = ls_line.
      APPEND ls_line TO lt_line.
      CLEAR: wa_header, ls_line, go_toc_flag.
      EXIT.
    ENDIF.

    READ TABLE lt_tt_cofi_lines INTO wa_tt_cofi_lines
     WITH KEY function = 'I' tarsystem(1) = 'E' .

    IF lv_as4date GT wa_tt_cofi_lines-trdate AND sy-subrc EQ 0.
*      MESSAGE 'PRJ TR has already been reached to EE1 before change starts' TYPE 'I'.
*
      CONCATENATE   gs_ztr_detail_info-trkorr TEXT-027 gs_ztr_detail_info-obj_name
      INTO          ls_line
      SEPARATED BY  space.

      CLEAR         gs_ztr_detail_info-lockflag.
      MODIFY gt_ztr_detail_info FROM gs_ztr_detail_info TRANSPORTING lockflag.
      APPEND ls_line TO lt_line.
      CLEAR:        wa_header, ls_line .


**        Ignore
    ELSEIF lv_as4date LE wa_tt_cofi_lines-trdate AND sy-subrc EQ 0.

*      MESSAGE 'This is case of over-writing BAU object by PRJ TR Kindly check all objects'(023) TYPE 'E'.
      CONCATENATE   TEXT-023 gs_ztr_detail_info-obj_name TEXT-009 gs_ztr_detail_info-trkorr
      INTO          ls_line
      SEPARATED BY  space.

      APPEND ls_line TO lt_line.
      CLEAR:        wa_header, ls_line, go_toc_flag.
**        This is over-writing issue
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_MESSAGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_ZTR_DETAIL_INFO  text
*----------------------------------------------------------------------*
FORM display_message  USING    p_gs_ztr_detail_info TYPE ztr_detail_info
                      CHANGING p_ls_line.

  CASE abap_true.
    WHEN cl_abap_matcher=>MATCHES( pattern = '/COCKPIT.+'
      text = p_gs_ztr_detail_info-obj_name ).
      p_ls_line = TEXT-028.
      EXIT.
    WHEN cl_abap_matcher=>MATCHES( pattern = '/BST.+'
      text = p_gs_ztr_detail_info-obj_name ).
      p_ls_line = TEXT-029.
      EXIT.
    WHEN cl_abap_matcher=>MATCHES( pattern = 'V023.+'
      text = p_gs_ztr_detail_info-obj_name ).
      p_ls_line = TEXT-031.
    WHEN OTHERS.
  ENDCASE.

  CASE p_gs_ztr_detail_info-object.
    WHEN 'F30'.
      p_ls_line = TEXT-032.
    WHEN 'FTXP'.
      p_ls_line = TEXT-032.
    WHEN 'ACGR'.
      p_ls_line = TEXT-030.
      gv_flag_excptmanual = 'X'.
      CLEAR go_toc_flag .
    WHEN 'TABU'.
      p_ls_line = TEXT-031.
*    WHEN 'VDAT'.
*      p_ls_line = TEXT-031.
    WHEN OTHERS.
  ENDCASE.

ENDFORM.

*****************************************************************************************************************************
**  This program is developed for Twin Transport Alignment team based on experience and KT given by Accenture
**  This is useful only for Twin Transport Team and will not be used by anyone else.  It will be useful only
**  for non-productive purpose hence never copied to Q*,A*,Z* systems
**  Any query related to this kindly contact DL-EVO-VSSI-Twin-Transport@vodafone.com
**  Solution Architect + Developer  :   Tushar Choksi  [ tushar.choksi02@vodafone.com  ]
**  Date                            :   11-Sep-2016
**  Transport Number                :   EE1K949929
*******************************************************************************************************************************

*&---------------------------------------------------------------------*
*&  Include           ZBC_ANALYZE_TRANSPORT_TOP
*&---------------------------------------------------------------------*
** Tables

TABLES : ztr_detail_info.

*Type pools declaration for ALV
TYPE-POOLS: slis.                    " ALV Global Types
*data declaration for dynamic internal table and alv
DATA:     gs_structure          TYPE REF TO data,
          lt_table              TYPE REF TO data,
          struc_desc            TYPE REF TO cl_abap_structdescr,
          lt_layout             TYPE slis_layout_alv,
          ls_lvc_fieldcatalogue TYPE lvc_s_fcat,
          lt_lvc_fieldcatalogue TYPE lvc_t_fcat,
          ls_fieldcatalogue     TYPE slis_fieldcat_alv,
          lt_fieldcatalogue     TYPE slis_t_fieldcat_alv,
          p_table               TYPE dd02l-tabname VALUE 'ZTR_DETAIL_INFO',
          gt_ztr_detail_info    TYPE STANDARD TABLE OF  ztr_detail_info,
          gt_ztr_detail_info2   TYPE STANDARD TABLE OF ztr_detail_info,
          gs_ztr_detail_info    LIKE LINE OF gt_ztr_detail_info2,
          gt_events             TYPE slis_t_event,
          gv_flag_toc           TYPE char1,
          gv_flag_excptmanual   TYPE char1,
          go_toc_flag           TYPE char1 VALUE 'X',
          gv_destination        TYPE string,
          lv_releasedt          TYPE char10,
          gv_releasedt          TYPE dats.

DATA: BEGIN OF lt_line OCCURS 0,
        ls_line TYPE char200,
      END OF lt_line.


DATA: lt_header     TYPE slis_t_listheader,
      lt_footer     TYPE TABLE OF slis_t_listheader,
      wa_footer     TYPE slis_listheader,
      wa_header     TYPE slis_listheader,
      ls_line       TYPE char200,
      lv_lines      TYPE i,
      lv_linesc(10) TYPE c,
      lv_header     TYPE c.


*field symbols declaration
FIELD-SYMBOLS :
  <it_table> TYPE STANDARD TABLE,
  <dyn_str>  TYPE any,
  <str_comp> TYPE abap_compdescr.
*declarations for grid title
DATA : t1(45),
       t2(10),
       t3(50) TYPE c VALUE 'ANALYSIS ON TRANSPORT'.


SELECT SINGLE value1
  INTO        gv_destination
  FROM        zxdynamic_func
  WHERE       id  = 'TWINTRANSP'
  AND criteria1   = 'DESTINATIO'  .


CALL FUNCTION 'RFC_GET_SYSTEM_INFO'
  EXPORTING
    destination             = gv_destination
  EXCEPTIONS
    authority_not_available = 1
    OTHERS                  = 2.

IF sy-subrc <> 0.
  MESSAGE text-020 TYPE 'A' .
ENDIF.

*selection screen declaration for table input
PARAMETERS     : p_ident TYPE dats OBLIGATORY DEFAULT gv_releasedt.
SELECT-OPTIONS : s_trkorr FOR ztr_detail_info-trkorr NO INTERVALS OBLIGATORY.

